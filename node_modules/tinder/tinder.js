var request = require('request');

/**
 * Constructs a new instance of the Tinder class
 * @param {String} the facebook authorization token
 * @param {String} the facebook users user ID
 */
function Tinder(fbToken, fbId) {
  this.apiUrl = "https://api.gotinder.com";
  this.fbToken = fbToken;
  this.fbId = fbId;
  this.authToken = null;
  this.users = [];
  this.lastLikedUser = {};
}

/**
 * Returns the current tinder auth token
 * @return {String} the tinder auth token
 */
Tinder.prototype.getAuthToken = function() {
  return this.authToken;
};

/**
 * Sets the current tinder auth token
 * @param {String} the tinder auth token
 */
Tinder.prototype.setAuthToken = function(token) {
  this.authToken = token;
};

/**
 * Returns the users in queue
 * @return {Array} an array of users
 */
Tinder.prototype.getUsers = function() {
  return this.users;
};

/**
 * Sets the queue of users
 * @param {Array} an array of users
 */
Tinder.prototype.setUsers = function(users) {
  this.users = users;
};

/**
 * Returns the last user liked through the likeUser function
 * @return {Object} a user object
 */
Tinder.prototype.getLastLikedUser = function() {
  return this.lastLikedUser;
};

/**
 * Returns and removes the next user in the user queue
 * @return {Object} a user object
 */
Tinder.prototype.getNextUser = function() {
  return this.users.pop();
};

/**
 * Sets the last liked user
 * @param {Object} a user object
 */
Tinder.prototype.setLastLikedUser = function(user) {
  this.lastLikedUser = user;
}

/**
 * Loads users into the user queue
 * @param {Function} the function to execute when processing is complete
 */
Tinder.prototype.loadUsers = function(callback) {
  var myThis = this;
  var options = {
    url: myThis.apiUrl +'/user/recs',
    method: 'GET',
    json: {
      limit: 10
    },
    headers: {
      'X-Auth-Token' : myThis.getAuthToken()
    }
  };

  request(options, function(err, res, body) {
    if (!err && body.results) {
      myThis.setUsers(body.results);
    }

    if(body.status === 401) {
      myThis.setAuthToken(null);
    }

    callback(err, res, body);
  });
};

/**
 * Sends a like API request to the supplied user
 * @param {Object} a user object
 * @param {Function} the function to execute when processing is complete
 */
Tinder.prototype.likeUser = function(user, callback) {
  var myThis = this;
  var options = {
    url: myThis.apiUrl +'/like/'+ user._id,
    method: 'GET',
    headers: {
      'X-Auth-Token': myThis.getAuthToken()
    }
  };

  request(options, function(err, res, body) {
    if(body.status === 401) {
      myThis.setAuthToken(null);
    }

    if(!err) {
      myThis.setLastLikedUser(user);
    }

    callback(err, res, body);
  });
};

/**
 * Returns the logged in status
 * @return {Boolean} true if the client is logged in
 */
Tinder.prototype.isLoggedIn = function() {
  return this.getAuthToken() !== null;
};

/**
 * Logs the client into Tinder
 * @param {Function} the function to execute when processing is complete
 */
Tinder.prototype.login = function(callback) {
  var myThis = this;
  var options = {
    url: myThis.apiUrl +'/auth',
    method: 'POST',
    json: {
      facebook_token: myThis.fbToken,
      facebook_id: myThis.fbId
    }
  };

  request(options, function(err, res, body) {
    if (!err && body.token) {
      myThis.setAuthToken(body.token);
    }

    callback(err, res, body);
  });
};

exports.Tinder = Tinder;